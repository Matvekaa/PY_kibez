# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000


Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)


Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""


def draw(l):
	for i in l:
		print(i.ljust(10), end='')
		print('  ', end='')
	print()
	

ip_str, mask_str = input('введите IP-сети: ').split('/')
ip_list = [i for i in ip_str.split('.')]
ip_bin_list = [str(bin(int(i)))[2:].rjust(8, '0') for i in ip_list]
mask_str_bin = ('1' * int(mask_str)) + ('0' * (32 - int(mask_str)))
mask_list_oct = [mask_str_bin[i * 8:(i + 1) * 8]for i in range(4)]
mask_list_int = [str(int(i, 2)) for i in mask_list_oct]
zero_pos_in_mask = ''.join(mask_list_oct).index('0')
if '1' in ''.join(ip_bin_list)[zero_pos_in_mask:]:
	new_ip_list = [str(int(ip_list[i]) & int(mask_list_int[i])) 
				   for i in range(4)]
	new_ip_bin_list = [str(bin(int(i)))[2:].rjust(8, '0')
					   for i in new_ip_list]
	print('Network:')
	draw(new_ip_list)
	draw(new_ip_bin_list)
	print()
	print('Mask:\n/' + str(mask_str))
	draw(mask_list_int)
	draw(mask_list_oct)
	
else:
	print('Network:')
	draw(ip_list)
	draw(ip_bin_list)
	print()
	print('Mask:\n/' + str(mask_str))
	draw(mask_list_int)
	draw(mask_list_oct)
